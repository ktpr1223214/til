package repository

import (
	"context"
	"database/sql"
	"github.com/ktpr1223214/til/security/vulnerability/examples/vulnerable-sample-app/pkg/model"
	"github.com/ktpr1223214/til/security/vulnerability/examples/vulnerable-sample-app/pkg/service"
	"github.com/pkg/errors"
	"time"
)

type sessionRepo struct {
	db *sql.DB
}

func NewSessionRepository(db *sql.DB) service.SessionRepository {
	return &sessionRepo{
		db: db,
	}
}

func (s *sessionRepo) SetSession(id string, username string, expiration time.Duration) error {
	tx, err := s.db.Begin()
	if err != nil {
		return errors.Wrapf(err, "failed to start transaction")
	}

	expired := time.Now().Add(expiration)
	if _, err := tx.Exec("insert into session (id, username, expired_at) VALUES (?, ?, ?) on duplicate key update username=?", id, username, expired.Unix(), username); err != nil {
		return errors.Wrapf(err, "failed to insert session data")
	}
	if err = tx.Commit(); err != nil {
		return errors.Wrapf(err, "failed to insert session data")
	}
	return nil
}

func (s *sessionRepo) GetSession(sessionID string) (*model.Session, error) {
	var session model.Session
	if err := s.db.QueryRowContext(context.Background(), "select * from session where id = ?", sessionID).Scan(&session); err != nil {
		return nil, errors.Wrapf(err, "failed to get session data by id %s", sessionID)
	}

	return &session, nil
}

func (s *sessionRepo) DeleteSession(sessionID string) error {
	if _, err := s.db.Query("delete from session where id = ?", sessionID); err != nil {
		return errors.Wrapf(err, "failed to delete session %s", sessionID)
	}
	return nil
}
