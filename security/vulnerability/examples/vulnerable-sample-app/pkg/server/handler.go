package server

import (
	"crypto/rand"
	"encoding/base64"
	"fmt"
	"io"
	"log"
	"net/http"
	"time"
)

func (s *Server) index() http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		w.Write([]byte(`<h1>Login</h1>
<form method="post" action="/login">
    <label for="name">User name</label>
    <input type="text" id="name" name="name">
    <label for="password">Password</label>
    <input type="password" id="password" name="password">
    <button type="submit">Login</button>
</form>`))
	}
}

func (s *Server) login() http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		err := r.ParseForm()
		if err != nil {
			log.Println("[Error] Failed to parse form")
			w.WriteHeader(http.StatusBadRequest)
			return
		}
		// TODO: check db
		var users = map[string]string{
			"user1": "pass1",
			"user2": "pass2",
		}
		username := r.PostForm.Get("username")
		password := r.PostForm.Get("password")
		expectedPass, ok := users[username]
		if !ok || password != expectedPass {
			// TODO: 適切に対応
			w.WriteHeader(http.StatusBadRequest)
			return
		}

		sessionID := getSessionID()
		// TODO: save session

		cookie := &http.Cookie{
			Name:    "session_id",
			Value:   sessionID,
			Expires: time.Now().Add(5 * time.Minute),
		}
		http.SetCookie(w, cookie)

		// TODO: redirect 先は、ここに飛ばしてきたページにスべきでは？
		// つまり、query param あたりに redirect_uri なりを入れておいてそこに飛ばすってこと
		// or referer ってこういうときに使えんのか？
		http.Redirect(w, r, "/user", http.StatusFound)
	}
}

func (s *Server) logout() http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		_, err := r.Cookie("session_id")
		if err != nil {
			// ログインしていない場合
			http.Redirect(w, r, "/index", http.StatusFound)
		}

		clearSessionID(w)
		http.Redirect(w, r, "/index", http.StatusFound)
	}
}

func (s *Server) user() http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// TODO: should session be enabled
		fmt.Println("impl user page")
	}
}

func (s *Server) healthy() http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		if err := s.db.Ping(); err != nil {
			// TODO: 503 で良いかどうか
			log.Printf("[Error] Could not ping db %s", err)
			w.WriteHeader(http.StatusServiceUnavailable)
			fmt.Fprintf(w, "App is UnHealthy.\n")
			return
		}

		w.WriteHeader(http.StatusOK)
		fmt.Fprintf(w, "App is Healthy.\n")
	}
}

/*
func (s *Server) version() http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		w.Write([]byte(fmt.Sprintf(`{
"source": "https://github.com/ktpr1223214/til",
"version": "%s",
"commit": "%s",
"build": "https://circleci.com/gh/Securing-DevOps/invoicer/"
}`, version, commit)))
	}
}*/

func getSessionID() string {
	b := make([]byte, 32)
	if _, err := io.ReadFull(rand.Reader, b); err != nil {
		return ""
	}
	return base64.URLEncoding.EncodeToString(b)
}

func clearSessionID(response http.ResponseWriter) {
	cookie := &http.Cookie{
		Name:   "session_id",
		Value:  "",
		Path:   "/",
		MaxAge: -1,
	}
	http.SetCookie(response, cookie)
}
