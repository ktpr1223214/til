package server

import (
	"context"
	"fmt"
	"log"
	"net/http"
)

const (
	sessionKey = "session_id"
)

func (s *server) index() http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		http.Redirect(w, r, "/login", http.StatusFound)
	})
}

func (s *server) getLogin() http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		_, err := r.Cookie(sessionKey)
		if err == nil {
			http.Redirect(w, r, "/welcome", http.StatusFound)
		}

		w.Write([]byte(`<h1>Login</h1>
<form method="post" action="/login">
    <label for="name">User name</label>
    <input type="text" id="username" name="username">
    <label for="password">Password</label>
    <input type="password" id="password" name="password">
    <button type="submit">Login</button>
</form>`))
	})
}

func (s *server) postLogin() http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		err := r.ParseForm()
		if err != nil {
			log.Println("[Error] Failed to parse form")
			w.WriteHeader(http.StatusBadRequest)
			return
		}

		username := r.PostForm.Get("username")
		password := r.PostForm.Get("password")
		ok, err := s.authService.CheckPassword(context.Background(), username, password)
		if err != nil {
			log.Printf("[Error] Failed to fetch password %s", err)
			w.WriteHeader(http.StatusInternalServerError)
			return
		}
		if !ok {
			log.Printf("[Error] Failed to match password from %s/%s", username, password)
			w.WriteHeader(http.StatusBadRequest)
			return
		}

		if err := s.authService.SetSession(w, username); err != nil {
			log.Printf("[Error] Failed to set settion %s", err)
			w.WriteHeader(http.StatusInternalServerError)
			return
		}

		http.Redirect(w, r, "/welcome", http.StatusFound)
	})
}

func (s *server) getLogout() http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		sessionID, err := r.Cookie(sessionKey)
		if err != nil {
			http.Redirect(w, r, "/", http.StatusFound)
			return
		}

		if err := s.authService.DeleteSession(w, sessionID.Value); err != nil {
			log.Printf("[Error] Failed to delete session %s", err)
			w.WriteHeader(http.StatusInternalServerError)
			return
		}
		http.Redirect(w, r, "/", http.StatusFound)
	})
}

func (s *server) welcome() http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		fmt.Fprint(w, "Welcome")
	})
}

func (s *server) healthy() http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		if err := s.db.Ping(); err != nil {
			log.Printf("[Error] Could not ping db %s", err)
			w.WriteHeader(http.StatusServiceUnavailable)
			fmt.Fprintf(w, "App is UnHealthy.\n")
			return
		}

		w.WriteHeader(http.StatusOK)
		fmt.Fprintf(w, "App is Healthy.\n")
	})
}
